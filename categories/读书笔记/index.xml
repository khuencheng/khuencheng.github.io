<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>读书笔记 on khuencheng's Personal Blog</title><link>https://khuencheng.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><description>Recent content in 读书笔记 on khuencheng's Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Sep 2020 09:22:15 +0800</lastBuildDate><atom:link href="https://khuencheng.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Distributed Systems for Fun and Profit 笔记（二）</title><link>https://khuencheng.github.io/posts/distributed-systems-for-fun-and-profit-part2/</link><pubDate>Tue, 15 Sep 2020 09:22:15 +0800</pubDate><guid>https://khuencheng.github.io/posts/distributed-systems-for-fun-and-profit-part2/</guid><description>2. 抽象的上下不同层次 系统模型 分布式系统中的程序： 在独立节点上同时运行 通过可能引入不确定性和消息丢失的网络连接 并且没有共享内存或共享时钟 系统模型列举了与特定系统设计相关的许多假设，实现分布式系统的环境和设施的假设： 节点具有什么功能以及它们如何失败 通信连接如何运行以及它们如何可能失败 整个系统的属性，例如关于时间和顺序的假设 健壮的系统模型做出最弱假设，强有力的假设创建易于推理的系统模型 此模型中的节点 作为</description></item><item><title>Distributed Systems for Fun and Profit 笔记 （一）</title><link>https://khuencheng.github.io/posts/distributed-systems-for-fun-and-profit-part1/</link><pubDate>Fri, 11 Sep 2020 01:51:32 +0800</pubDate><guid>https://khuencheng.github.io/posts/distributed-systems-for-fun-and-profit-part1/</guid><description>0. 前言 &amp;ldquo;Distributed Systems for Fun and Profit&amp;rdquo; 是 mixu 2013 年在 网络上 免费发布的一本介绍分布式系统的小册子。 分布式的两种结果： 信息以光速传播 独立节点独自失败 分布式系统处理距离和多个节点的问题 1. 从高层次角度看分布式系统 计算机的基本任务 存储 计算 分布式编程就是用多机解决在单机上的相同问题，通常此问题单机已经不能满足要求。 小规模时，单个节点上升级硬件可以解决问题，但随着问题规模增大，单节点升级硬件无法解决或者成本过高时就需要分布式系统。当前</description></item></channel></rss>