<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Go 1.18 on khuencheng's Personal Blog</title><link>https://khuencheng.github.io/tags/go-1.18/</link><description>Recent content in Go 1.18 on khuencheng's Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 16 Mar 2022 22:41:56 +0800</lastBuildDate><atom:link href="https://khuencheng.github.io/tags/go-1.18/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 1.18 泛型介绍</title><link>https://khuencheng.github.io/posts/go-generics/</link><pubDate>Wed, 16 Mar 2022 22:41:56 +0800</pubDate><guid>https://khuencheng.github.io/posts/go-generics/</guid><description>什么是泛型 泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。 Golang 泛型基本用法 示例 map 操作 package main import ( &amp;#34;fmt&amp;#34; ) func mapFunc[T any, M any](a []T, f func(T) M) []M { n := make([]M, len(a), cap(a)) for i, e := range a { n[i] = f(e) } return n } func main() { vi := []int{1, 2, 3, 4, 5, 6} vs := mapFunc(vi, func(v int) string { return &amp;#34;&amp;lt;&amp;#34; + fmt.Sprint(v * v) + &amp;#34;&amp;gt;&amp;#34; }) fmt.Println(vs) } min max 函数 package main import ( &amp;#34;fmt&amp;#34; ) type ordered interface { ~int | ~int8 | ~int16 | ~int32 | ~int64 | ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 |</description></item></channel></rss>